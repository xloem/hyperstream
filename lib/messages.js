// This file is auto generated by the protocol-buffers cli tool

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Checkpoint = exports.Checkpoint = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var BitcoinCheckpointPublication = exports.BitcoinCheckpointPublication = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Timestamp = exports.Timestamp = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Database = exports.Database = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var InflatedDatabase = exports.InflatedDatabase = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineCheckpoint()
defineBitcoinCheckpointPublication()
defineTimestamp()
defineDatabase()
defineInflatedDatabase()

function defineCheckpoint () {
  var enc = [
    encodings.bytes,
    encodings.varint
  ]

  Checkpoint.encodingLength = encodingLength
  Checkpoint.encode = encode
  Checkpoint.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    var len = enc[0].encodingLength(obj.rootsHash)
    length += 1 + len
    if (!defined(obj.timestamp)) throw new Error("timestamp is required")
    var len = enc[1].encodingLength(obj.timestamp)
    length += 1 + len
    if (!defined(obj.length)) throw new Error("length is required")
    var len = enc[1].encodingLength(obj.length)
    length += 1 + len
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    var len = enc[1].encodingLength(obj.byteLength)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    buf[offset++] = 2
    enc[0].encode(obj.rootsHash, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.timestamp)) throw new Error("timestamp is required")
    buf[offset++] = 8
    enc[1].encode(obj.timestamp, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.length)) throw new Error("length is required")
    buf[offset++] = 16
    enc[1].encode(obj.length, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    buf[offset++] = 24
    enc[1].encode(obj.byteLength, buf, offset)
    offset += enc[1].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      rootsHash: null,
      timestamp: 0,
      length: 0,
      byteLength: 0
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.rootsHash = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 1:
        obj.timestamp = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        case 2:
        obj.length = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 3:
        obj.byteLength = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found3 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineBitcoinCheckpointPublication () {
  var enc = [
    encodings.bytes
  ]

  BitcoinCheckpointPublication.encodingLength = encodingLength
  BitcoinCheckpointPublication.encode = encode
  BitcoinCheckpointPublication.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.hash)) throw new Error("hash is required")
    var len = enc[0].encodingLength(obj.hash)
    length += 1 + len
    if (!defined(obj.txid)) throw new Error("txid is required")
    var len = enc[0].encodingLength(obj.txid)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.hash)) throw new Error("hash is required")
    buf[offset++] = 2
    enc[0].encode(obj.hash, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.txid)) throw new Error("txid is required")
    buf[offset++] = 10
    enc[0].encode(obj.txid, buf, offset)
    offset += enc[0].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      hash: null,
      txid: null
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.hash = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 1:
        obj.txid = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTimestamp () {
  var enc = [
    encodings.bytes
  ]

  Timestamp.encodingLength = encodingLength
  Timestamp.encode = encode
  Timestamp.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.id)) {
      for (var i = 0; i < obj.id.length; i++) {
        if (!defined(obj.id[i])) continue
        var len = enc[0].encodingLength(obj.id[i])
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.id)) {
      for (var i = 0; i < obj.id.length; i++) {
        if (!defined(obj.id[i])) continue
        buf[offset++] = 2
        enc[0].encode(obj.id[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.id.push(enc[0].decode(buf, offset))
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineDatabase () {
  var enc = [
    encodings.varint,
    encodings.bytes
  ]

  Database.encodingLength = encodingLength
  Database.encode = encode
  Database.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.metaclock)) {
      for (var i = 0; i < obj.metaclock.length; i++) {
        if (!defined(obj.metaclock[i])) continue
        var len = enc[0].encodingLength(obj.metaclock[i])
        length += 1 + len
      }
    }
    if (defined(obj.contentclock)) {
      for (var i = 0; i < obj.contentclock.length; i++) {
        if (!defined(obj.contentclock[i])) continue
        var len = enc[0].encodingLength(obj.contentclock[i])
        length += 1 + len
      }
    }
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    var len = enc[1].encodingLength(obj.rootsHash)
    length += 1 + len
    if (!defined(obj.inflate)) throw new Error("inflate is required")
    var len = enc[0].encodingLength(obj.inflate)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.metaclock)) {
      for (var i = 0; i < obj.metaclock.length; i++) {
        if (!defined(obj.metaclock[i])) continue
        buf[offset++] = 0
        enc[0].encode(obj.metaclock[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    if (defined(obj.contentclock)) {
      for (var i = 0; i < obj.contentclock.length; i++) {
        if (!defined(obj.contentclock[i])) continue
        buf[offset++] = 8
        enc[0].encode(obj.contentclock[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    buf[offset++] = 18
    enc[1].encode(obj.rootsHash, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.inflate)) throw new Error("inflate is required")
    buf[offset++] = 24
    enc[0].encode(obj.inflate, buf, offset)
    offset += enc[0].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      metaclock: [],
      contentclock: [],
      rootsHash: null,
      inflate: 0
    }
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.metaclock.push(enc[0].decode(buf, offset))
        offset += enc[0].decode.bytes
        break
        case 1:
        obj.contentclock.push(enc[0].decode(buf, offset))
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.rootsHash = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 3:
        obj.inflate = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found3 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineInflatedDatabase () {
  var enc = [
    encodings.varint,
    encodings.bytes
  ]

  InflatedDatabase.encodingLength = encodingLength
  InflatedDatabase.encode = encode
  InflatedDatabase.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.metaclock)) {
      for (var i = 0; i < obj.metaclock.length; i++) {
        if (!defined(obj.metaclock[i])) continue
        var len = enc[0].encodingLength(obj.metaclock[i])
        length += 1 + len
      }
    }
    if (defined(obj.contentclock)) {
      for (var i = 0; i < obj.contentclock.length; i++) {
        if (!defined(obj.contentclock[i])) continue
        var len = enc[0].encodingLength(obj.contentclock[i])
        length += 1 + len
      }
    }
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    var len = enc[1].encodingLength(obj.rootsHash)
    length += 1 + len
    if (!defined(obj.inflate)) throw new Error("inflate is required")
    var len = enc[0].encodingLength(obj.inflate)
    length += 1 + len
    if (defined(obj.metafeeds)) {
      for (var i = 0; i < obj.metafeeds.length; i++) {
        if (!defined(obj.metafeeds[i])) continue
        var len = enc[1].encodingLength(obj.metafeeds[i])
        length += 1 + len
      }
    }
    if (defined(obj.contentfeeds)) {
      for (var i = 0; i < obj.contentfeeds.length; i++) {
        if (!defined(obj.contentfeeds[i])) continue
        var len = enc[1].encodingLength(obj.contentfeeds[i])
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.metaclock)) {
      for (var i = 0; i < obj.metaclock.length; i++) {
        if (!defined(obj.metaclock[i])) continue
        buf[offset++] = 0
        enc[0].encode(obj.metaclock[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    if (defined(obj.contentclock)) {
      for (var i = 0; i < obj.contentclock.length; i++) {
        if (!defined(obj.contentclock[i])) continue
        buf[offset++] = 8
        enc[0].encode(obj.contentclock[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    buf[offset++] = 18
    enc[1].encode(obj.rootsHash, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.inflate)) throw new Error("inflate is required")
    buf[offset++] = 24
    enc[0].encode(obj.inflate, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.metafeeds)) {
      for (var i = 0; i < obj.metafeeds.length; i++) {
        if (!defined(obj.metafeeds[i])) continue
        buf[offset++] = 34
        enc[1].encode(obj.metafeeds[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    if (defined(obj.contentfeeds)) {
      for (var i = 0; i < obj.contentfeeds.length; i++) {
        if (!defined(obj.contentfeeds[i])) continue
        buf[offset++] = 42
        enc[1].encode(obj.contentfeeds[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      metaclock: [],
      contentclock: [],
      rootsHash: null,
      inflate: 0,
      metafeeds: [],
      contentfeeds: []
    }
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.metaclock.push(enc[0].decode(buf, offset))
        offset += enc[0].decode.bytes
        break
        case 1:
        obj.contentclock.push(enc[0].decode(buf, offset))
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.rootsHash = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 3:
        obj.inflate = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found3 = true
        break
        case 4:
        obj.metafeeds.push(enc[1].decode(buf, offset))
        offset += enc[1].decode.bytes
        break
        case 5:
        obj.contentfeeds.push(enc[1].decode(buf, offset))
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
